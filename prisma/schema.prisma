generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phoneNumber   String?   @unique
  phoneVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  hashedPassword String?  // Add this line

  // Relations
  accounts          Account[]
  sessions          Session[]
  vipPasses         VIPPass[]
  groups            UserGroup[]
  createdGroups     Group[]
  chatMessages      ChatMessage[]
  createdCrawls     Crawl[]           @relation("CrawlCreator")
  crawlParticipants CrawlParticipant[]
  crawlChats        CrawlChatMessage[]
  phoneVerifications PhoneVerification[]

  @@map("users")
}

model PhoneVerification {
  id          String   @id @default(cuid())
  phoneNumber String
  code        String
  expires     DateTime
  verified    Boolean  @default(false)
  userId      String?  // Link to user if they exist

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([phoneNumber, code])
  @@map("phone_verifications")
}

model City {
  id        String   @id @default(cuid())
  name      String   @unique
  country   String   @default("Finland")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  bars   Bar[]
  groups Group[]
  crawls Crawl[] // Add this

  @@map("cities")
}

model Bar {
  id          String   @id @default(cuid())
  name        String   @unique 
  description String?
  address     String
  cityId      String
  district    String
  type        BarType
  latitude    Float
  longitude   Float
  imageUrl    String?
  phone       String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // VIP Features
  vipEnabled  Boolean @default(false)
  vipPrice    Float?
  vipCapacity Int? // Max VIP passes per time slot

  // Relations
  city      City          @relation(fields: [cityId], references: [id])
  vipPasses VIPPass[]
  featured  FeaturedBar[]
  crawlBars CrawlBar[] // Add this

  @@map("bars")
}

enum BarType {
  PUB
  CLUB
  LOUNGE
  COCKTAIL_BAR
  RESTAURANT_BAR
  SPORTS_BAR
  KARAOKE
  LIVE_MUSIC
}

model VIPPass {
  id        String    @id @default(cuid())
  userId    String
  barId     String
  qrCode    String    @unique
  isValid   Boolean   @default(true)
  usedAt    DateTime?
  startTime DateTime
  endTime   DateTime
  createdAt DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  bar  Bar  @relation(fields: [barId], references: [id], onDelete: Cascade)

  @@map("vip_passes")
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  creatorId   String
  isPublic    Boolean  @default(true)
  maxMembers  Int      @default(10)
  cityId      String
  createdAt   DateTime @default(now())

  // Relations
  creator User          @relation(fields: [creatorId], references: [id])
  members UserGroup[]
  chats   ChatMessage[]
  city    City          @relation(fields: [cityId], references: [id])

  @@map("groups")
}

model UserGroup {
  id      String @id @default(cuid())
  userId  String
  groupId String

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
  @@map("user_groups")
}

model ChatMessage {
  id        String   @id @default(cuid())
  groupId   String
  userId    String
  content   String
  createdAt DateTime @default(now())

  // Relations
  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("chat_messages")
}

model FeaturedBar {
  id        String   @id @default(cuid())
  barId     String
  startDate DateTime
  endDate   DateTime
  priority  Int      @default(1)
  createdAt DateTime @default(now())

  // Relations
  bar Bar @relation(fields: [barId], references: [id])

  @@map("featured_bars")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Crawl {
  id          String   @id @default(cuid())
  name        String
  description String?
  creatorId   String
  cityId      String
  date        DateTime
  startTime   DateTime
  endTime     DateTime?
  maxParticipants Int  @default(10)
  isPublic    Boolean  @default(true)
  status      CrawlStatus @default(PLANNING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User              @relation("CrawlCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  city        City              @relation(fields: [cityId], references: [id])
  participants CrawlParticipant[]
  crawlBars   CrawlBar[]
  chats       CrawlChatMessage[]

  @@map("crawls")
}

model CrawlParticipant {
  id      String @id @default(cuid())
  crawlId String
  userId  String

  // Relations
  crawl Crawl @relation(fields: [crawlId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([crawlId, userId])
  @@map("crawl_participants")
}

model CrawlBar {
  id          String   @id @default(cuid())
  crawlId     String
  barId       String
  orderIndex  Int
  duration    Int      // in minutes
  startTime   DateTime?
  endTime     DateTime?

  // Relations
  crawl Crawl @relation(fields: [crawlId], references: [id])
  bar   Bar   @relation(fields: [barId], references: [id])

  @@unique([crawlId, barId])
  @@map("crawl_bars")
}

model CrawlChatMessage {
  id        String   @id @default(cuid())
  crawlId   String
  userId    String
  content   String
  createdAt DateTime @default(now())

  // Relations
  crawl Crawl @relation(fields: [crawlId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("crawl_chat_messages")
}

enum CrawlStatus {
  PLANNING
  UPCOMING
  ACTIVE
  COMPLETED
  CANCELLED
}